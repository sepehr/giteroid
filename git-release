#!/bin/bash
# Tags a new release with the given version. Optionally creates a Gitlab release. The Gitlab API endpoint is inferred
# from the remote named "origin". Change `git_remote_name` below to rely on another remote.
#
# Usage:
# git release <version> [--gitlab]
#
# Example:
# git release 4.2.0 --gitlab

for cmd in git git-changelog curl sed jq; do
    if ! command -v $cmd &> /dev/null; then
        echo "‚ùóÔ∏èERROR: $cmd is not installed."
        exit 1
    fi
done

if [ "$#" -lt 1 ] || [[ "$1" =~ ^-- ]]; then
    echo "Usage: git release <version> [--gitlab]"
    exit 1
fi

gitlab_release=false
for arg in "$@"; do
    if [ "$arg" = "--gitlab" ]; then
        gitlab_release=true
        break
    fi
done

version=$1
changelog=$(git changelog)
git_remote_name=origin
git_tag_name="$version"
git_tag_annotation="Release $version\n\n$changelog"
git_tag_annotation=$(printf %b "${git_tag_annotation}")

git tag -s -a "$git_tag_name" -m "$git_tag_annotation"
echo "New tag was successfully created üï∫"

# See: https://docs.gitlab.com/ee/api/releases/#create-a-release
if [ "$gitlab_release" = true ]; then
    release_name="$version"
    release_desc="### Release $release_name  \n\n#### $changelog"
    release_desc=$(printf %b "${release_desc}")

    rollback () {
        printf "\n‚ùóÔ∏èERROR\n%s\n\n‚ÑπÔ∏è  INFO\nThe tag we just created is going to be deleted now. Good luck next time!\n" "$1"
        git tag -d "$version"
        echo "Evaluate if the tag needs to be deleted from the remote as well. If so, please do it manually:"
        echo "git push origin --no-verify -d $version"
        exit 1
    }

    if [ -z "$GITLAB_RELEASE_ACCESS_TOKEN" ]; then
        rollback "To make a Gitlab release, make sure the \"GITLAB_RELEASE_ACCESS_TOKEN\" env var is available."
    fi

    git push "$git_remote_name" "$version" --no-verify

    project_url=$(git remote get-url $git_remote_name)
    repo_path=${project_url##*:}  # Extract the part after the colon.
    repo_path=${repo_path%.git}   # Remove the ".git" suffix.
    project_id=$(echo "$repo_path" | sed -E 's|/|%2F|g')
    domain=${project_url%%:*}     # Extract the domain before the colon.
    domain=${domain//git@/}       # Remove git@ if it exists in the domain.
    domain=${domain//https:\/\//} # Remove https:// if it exists in the domain.
    domain=${domain//.clu01/}     # Remove .clu01 if it exists in the domain. Sorry!

    # See: https://stackoverflow.com/a/73907425/65732
    gitlab_api_url="https://$domain/api/v4/projects/$project_id/releases"
    gitlab_release_payload=$(jq \
        '{"name":$release_name,"description":$release_desc,"tag_name":$version}' \
        --arg release_name "$release_name" \
        --arg release_desc "$release_desc" \
        --arg version "$version" \
        --null-input --compact-output --raw-output --monochrome-output
    )

    response=$(curl -s \
        --location "$gitlab_api_url" \
        --write-out "%{http_code}\n" \
        --header 'Content-Type: application/json' \
        --header "PRIVATE-TOKEN: $GITLAB_RELEASE_ACCESS_TOKEN" \
        --data "$gitlab_release_payload"
    )
    response_body="${response:0:${#response}-3}"
    response_code="${response: -3}"

    if [[ "$response_code" -eq 201 ]]; then
        echo "A new Gitlab release was created üíÉüéâ"
        echo "https://$domain/$repo_path/-/releases/$release_name"
    else
        rollback "Failed to create the Gitlab release: ($response_code) $(echo $response_body | jq .message)"
    fi
fi
